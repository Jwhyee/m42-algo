package COCI06.contest5

import java.util.StringTokenizer

/**
 * ### 문제 설명
 * - 첫 번째 플레이어는 아무 수를 가질 수 있다.
 * - 두 번째 플레이어는 첫 번째 플레이어가 가져간 숫자에 인접한 두 숫자 중 하나를 가져갈 수 있다.
 * - 그 다음 플레이어는 지금까지 가져간 숫자들 중 어느 것에 인접한 숫자를 가져갈 수 있다.
 * - 숫자가 다 떨어질 때까지 계속되며, 더 많은 홀수를 가져가는 플레이어가 승리한다.(2로 나눌 수 없다.)
 * - 첫 줄에 정수 N이 주어진다.(1 <= N <= 100)
 * - 두 번째 줄에는 N개의 수가 주어진다. (1 <= Ns <= 1000)
 * - 같은 수는 주어지지 않는다.
 * ### 예제 2번
 * - 1, 2, 3, 4
 * - 이바나 1 -> 즈본코 2 -> 이바나 3 -> 즈본코 4
 * - 이바나 1 -> 즈본코 4 -> 이바나 3 -> 즈본코 2
 * - 이바나 3 -> 즈본코 4 -> 이바나 1 -> 즈본코 2
 * - 이바나 3 -> 즈본코 2 -> 이바나 1 -> 즈본코 4
 * - 2가지의 수를 고를 수 있음
 * ### 예제 3번
 * - 4, 10, 5, 2, 9, 8, 1, 7
 * - 이바나 5 -> 즈본코 2 -> 이바나 9 -> 즈본코 8 -> 이바나 1 -> 즈본코 7 -> 이바나 4 -> 즈본코 10 => 이바나 3개 / 즈본코 1개
 * - 이바나 9 -> 즈본코 2 -> 이바나 5 -> 즈본코 8 -> 이바나 1 -> 즈본코 7 -> 이바나 10 -> 즈본코 4 => 이바나 3개 / 즈본코 1개
 * - 이바나 1 -> 즈본코 8 -> 이바나 7 -> 즈본코 4 -> 이바나 9 -> 즈본코 2 -> 이바나 5 -> 즈본코 10 => 이바나 3개 / 즈본코 1개
 * - 이바나 7 -> 즈본코 4 -> 이바나 1 -> 즈본코 8 -> 이바나 9 -> 즈본코 2 -> 이바나 5 -> 즈본코 10 => 이바나 3개 / 즈본코 1개
 * - 이바나 10 -> 즈본코 4 -> 이바나 7 -> 즈본코 5 -> 이바나 1 -> 즈본코 8 -> 이바나 9 -> 즈본코 2 => 이바나 3개 / 즈본코 1개
 * */
fun main() = with(System.`in`.bufferedReader()) {
   val n = readLine().toIntOrNull() ?: error("Invalid N")
   if (n !in 0..100) error("Invalid N range")

   val st = StringTokenizer(readLine())

   val arr = Array(n) { 0 }

   var idx = 0
   while (st.hasMoreTokens()) {
      val cur = st.nextToken().toIntOrNull() ?: error("Invalid number format")
      arr[idx++] = cur
   }



}